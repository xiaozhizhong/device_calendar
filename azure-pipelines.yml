variables:
  # The $(FlutterToolPath) variable is generated by the FlutterInstall task 
  # See code in the Flutter Build task https://github.com/aloisdeniel/vsts-flutter-tasks/blob/master/tasks/build/index.ts
  flutterExecPath: $(FlutterToolPath)/flutter.bat
  versionNumberRegex: '(?<=version: ).*'

trigger:
  batch: 'true'
  branches:
    include:
      - develop
      - release
      - hotfix
      - master

stages:
  # ----------- CI -----------
  - stage: Build
    jobs: 
     - job: BuildAndroidAndIos
       pool:
        vmImage: 'macOS-latest'
       steps:
        - task: FlutterInstall@0
          displayName: 'Flutter install'
          inputs:
            channel: 'stable'
            version: 'latest'

        - task: FlutterBuild@0
          displayName: 'Flutter build - Android'
          inputs:
            target: 'aab'
            buildNumber: $(Build.BuildID)
            projectDirectory: 'example'

        - task: FlutterBuild@0
          displayName: 'Flutter build - iOS'
          inputs:
            target: 'ios'
            projectDirectory: 'example'
            iosCodesign: false
            
  # -----------CD Pre-release -----------
  - stage: DevelopmentRelease
    dependsOn: Build
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/release', 'refs/heads/hotfix'))
    jobs:
     - job: ReleaseDevelopmentVersion
       pool:
        vmImage: 'windows-latest'
       steps:
        - task: FlutterInstall@0
          displayName: 'Flutter install'
          inputs:
            channel: 'stable'
            version: 'latest'

        - task: PowerShell@2
          displayName: 'Pre-release versioning - pubspec.yaml'
          inputs:
            targetType: 'inline'
            script: |
              [string] $version = select-string -path "$(Build.SourcesDirectory)/pubspec.yaml" -pattern "$(versionNumberRegex)" | %{ $_.Matches[0].Value }
              Write-Host "##vso[task.setvariable variable=currentVersion]$version"

              [string] $pubspecContent = Get-Content -Path "$(Build.SourcesDirectory)/pubspec.yaml" -Raw

              Write-Host " (i) Current version: $version"
              Write-Host " (i) Original pubspec.yaml content: $pubspecContent"

              [bool] $hasMatches = $pubspecContent -match $versionRegex
              
              [string] $newPubspecContent = $pubspecContent -replace $version, "$version-dev.$(Build.BuildID)"

              Write-Host " (i) Updated pubspec.yaml content: $newPubspecContent"

              $newPubspecContent | Set-Content -Path "$(Build.SourcesDirectory)/pubspec.yaml"

        - task: PowerShell@2
          displayName: 'Pre-release versioning - CHANGELOG.md'
          inputs:
            targetType: 'inline'
            script: |
              [string] $changelogContent = Get-Content -Path "$(Build.SourcesDirectory)/CHANGELOG.md" -Raw

              Write-Host " (i) Current version: $env.currentVersion"
              Write-Host " (i) Original CHANGELOG.md content: $changelogContent"

              [string] $newChangelogContent = $changelogContent -replace $env:currentVersion, "$env:currentVersion-dev.$(Build.BuildID)"

              Write-Host " (i) Updated CHANGELOG.md content: $newChangelogContent"

              $newChangelogContent | Set-Content -Path "$(Build.SourcesDirectory)/CHANGELOG.md"
              
        - task: PowerShell@2
          displayName: 'Create publisher credentials file'
          inputs:
            targetType: 'inline'
            script: |
              cd $(FlutterToolPath)
              cd..
              cd .pub-cache/

              $credentials = @{
                accessToken = "$(ACCESS_TOKEN)"
                refreshToken = "$(REFRESH_TOKEN)"
                tokenEndpoint = "$(TOKEN_ENDPOINT)"
                scopes = @("https://www.googleapis.com/auth/userinfo.email","openid")
                expiration = $(EXPIRATION)
              } | ConvertTo-Json | Out-File -FilePath .\credentials.json -Encoding UTF8

        - task: CmdLine@2
          displayName: 'Dry run publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)'
            script: '$(flutterExecPath) pub publish --dry-run'

        - task: CmdLine@2
          displayName: 'Publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)'
            script: '$(flutterExecPath) pub publish --force'
            
  # ----------- CD Production -----------
  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs: 
     - job: Release
       pool:
        vmImage: 'windows-latest'
       steps:
        - task: FlutterInstall@0
          displayName: 'Flutter install'
          inputs:
            channel: 'stable'
            version: 'latest'

        - task: PowerShell@2
          displayName: 'Get version from pubspec.yaml'
          inputs:
            targetType: 'inline'
            script: |
              [string] $version = select-string -path "$(Build.SourcesDirectory)/pubspec.yaml" -pattern "$(versionNumberRegex)" | %{ $_.Matches[0].Value }
              
              Write-Host "##vso[task.setvariable variable=currentVersion]$version"

        - task: PowerShell@2
          displayName: 'Get version summary from CHANGELOG.md'
          inputs:
            targetType: 'inline'
            script: |
              [string] $summary = select-string -path "$(Build.SourcesDirectory)/CHANGELOG.md" -pattern "($([regex]::escape($env:currentVersion))).*" | %{ $_.Matches[0].Value }
              
              Write-Host "##vso[task.setvariable variable=versionSummary]$summary"

        - task: PowerShell@2
          displayName: 'Create publisher credentials file'
          inputs:
            targetType: 'inline'
            script: |
              cd $(FlutterToolPath)
              cd..
              cd .pub-cache/

              $credentials = @{
                accessToken = "$(ACCESS_TOKEN)"
                refreshToken = "$(REFRESH_TOKEN)"
                tokenEndpoint = "$(TOKEN_ENDPOINT)"
                scopes = @("https://www.googleapis.com/auth/userinfo.email","openid")
                expiration = $(EXPIRATION)
              } | ConvertTo-Json | Out-File -FilePath .\credentials.json -Encoding UTF8

        - task: CmdLine@2
          displayName: 'Dry run publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)'
            script: '$(flutterExecPath) pub publish --dry-run'

        - task: CmdLine@2
          displayName: 'Publish'
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)'
            script: '$(flutterExecPath) pub publish --force'

        - task: GitHubReleasePublish@1
          displayName: 'Tag a release to GitHub'
          inputs:
            githubEndpoint: 'GitHub Tagging'
            manuallySetRepository: false
            githubRepository: 'builttoroam/device_calendar'
            githubTag: 'v$(currentVersion)'
            githubReleaseTitle: '$(versionSummary)'
            githubReleaseDraft: false
            githubReleasePrerelease: false
            githubIgnoreAssets: false
            githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*'
            githubReuseRelease: false
            githubReuseDraftOnly: false
            githubSkipDuplicatedAssets: false
            githubEditRelease: false
            githubDeleteEmptyTag: false